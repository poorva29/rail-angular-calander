@model IEnumerable<MiraiConsultMVC.Models.admin.AssignQuestion>
@{
    ViewBag.Title = "assignquestion";
    Layout = "~/Views/Shared/_PatientMasterLayout.cshtml";
}

<link rel="stylesheet" href="../Content/chosen/chosen.css" />
<script type="text/javascript" src="../Content/chosen/chosen.jquery.js"></script>
<script type="text/javascript" src="../Content/js/jquery.dataTables.js"></script>
<script type="text/javascript" src="../Content/js/bootstrap-pagination.js"></script>
<div class="row-fluid">

    <div class="span12 main-outter-padding">
        <div class="row-fluid">
            <div class="span12 finddoc-title">
                Assign Question
            </div>
        </div>
        <div class="">
            @if (Model != null && Model.ToList().Count > 0 )
            { 
            <div class='row-fluid' style="word-break:break-all">
                <div class="span10 ">
                    <p class='question_text'>@Model.ToList().First().questiontext </p>
                </div>
            </div>
            }
            
            <div class="row-fluid">
                <div class="span6">
                    <div class="control-group">
                        <label class="control-label">Tags:</label>
                        <div class="controls">
                                @Html.ListBox(
                                    "lstOfTags",
                                    ViewBag.tags as MultiSelectList,
                                                new { @class = "chzn-select max-width" }
                                    )
                        </div>
                    </div>
                </div>
            </div>
            <div class="row-fluid">
                <div class="span12">
                    <div class="control-group">
                        <label class="control-label"></label>
                        <div class="controls">
                            <input type="button" id="btnCreateDoctorAccount" onclick="validatedata()" value="Add Tags" class="btn thanx" />
                            <input type="button" id="btnClear" value="Cancel" class="btn cancel" onclick=" removeAssigntags()" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="row-fluid">
                <div class="span12">
                    <hr class="bottomdivleftpadding" />
                </div>
            </div>
            <div class="top_margin content_border find-Doc-gbColor">
                <div class="row-fluid">
                    <div class="span4 div-left-padding">
                        <div class="margin-bottom-tolabel" style="min-width: 220px;">
                            Enter Speciality or Doctor's Name
                        </div>
                        <input type="text" style="width: 200px" class="find_Doc_inputbox" id="txtSpecialityOrName" placeholder="Enter Speciality or Doctor Name" />
                    </div>
                    <div class="span4 city-div-left-padding">
                        <div class="margin-bottom-tolabel">
                            Select City
                        </div>
                        <div id="div-city-select" class="city_chzn">
                            <select id="city-select" data-placeholder="Select City" class="chzn-select chzn_div_width" style="width: 215px">
                                <option value=""></option>
                            </select>
                        </div>
                    </div>
                    <div class="span4 location_margin">
                        <div class="margin-bottom-tolabel">
                            Select Location
                        </div>
                        <select id="locality-select" data-placeholder="Select Location" class="chzn-select chosen_margin chzn_div_width" style="width: 215px">
                            <option value=""></option>
                        </select>
                    </div>
                </div>
                <div class="row-fluid">
                    <div class="span2 div-left-padding">
                        <button class="btn thanx search_margin" onclick="return  btnSearchDoctor_Click()">Search</button>
                    </div>
                </div>
            </div>
            <div class="row-fluid">
                <div class="span12">
                    <hr class="bottomdivleftpadding" />
                </div>
            </div>
            <div id="searchResult">
            </div>
            <div class="row-fluid">
                <div class="span12">
                    <div class="control-group">
                        <label class="control-label"></label>
                        <div class="controls">
                            <button type="button" onclick="btnAssign_Click()" class="btn thanx btnAssign" style="display: inline-block !important;">Assign</button>
                            <button type="button" onclick="btnCancel_Click()" class="btn cancel" style="display: inline-block !important;">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row-fluid">
                <div class="span12">
                    <hr class="bottomdivleftpadding" />
                </div>
            </div>
            <div class='row-fluid'>
                <div class="span12 ">
                    <div class="table-responsive" id="divToReplace">
                        <table cellpadding="0" cellspacing="0" border="0" class="custom-table zebra-striped"
                               id="assign-doctor-list" width="100%">
                            <thead>
                                <tr>
                                    <th>
                                        <b>Userid</b>
                                    </th>
                                    <th>
                                        <b>Name</b>
                                    </th>
                                    <th>
                                        <b>City</b>
                                    </th>
                                    <th>
                                        <b>Location</b>
                                    </th>
                                    <th>
                                        <b>Specialities</b>
                                    </th>
                                    <th class="minwidth-remove">
                                        <b>Action</b>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model != null && Model.ToList().Count > 0)
                                {
                                for (int i = 0; i < Model.ToList().Count; i++)
                                {
                                if (i == 0)
                                {
                                    ViewBag.Value = Convert.ToString(Model.ToList()[i].userid);
                                }
                                else
                                {
                                    ViewBag.Value = ViewBag.Value + "," + Convert.ToString(Model.ToList()[i].userid);
                                }
                                
                                <tr>
                                    <td>
                                        @Model.ToList()[i].userid
                                    </td>
                                    <td>
                                        @Model.ToList()[i].name
                                    </td>
                                    <td style='word-wrap: break-word'>
                                        @Model.ToList()[i].cities
                                    </td>
                                    <td style='word-wrap: break-word'>
                                        @Model.ToList()[i].locations
                                    </td>
                                    <td style='word-wrap: break-word'>
                                        @Model.ToList()[i].specialities
                                    </td>
                                    <td style='word-wrap: break-word' class="last-row">
                                        <a href="#" onclick="removeAssignDoctor(@Model.ToList()[i].userid , @Model.ToList()[i].Questionid)">
                                            <img class="cust-icon" src="../Content/image/revoke.png " id="removebtn">
                                        </a>
                                    </td>
                                </tr>
                                }
                                } 
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <input type="hidden" id="hdnQuestionid" value="@ViewBag.questionid" />
        <input type="hidden" id="hdndoctorIds" name="hdndoctorIds" />
        <input type="hidden" id="hdnQuestionId" name="hdnQuestionId" value="@Model.ToList()[0].Questionid" />
        <div class="row-fluid">
            <div class="span12">
                <hr class="bottomdivleftpadding" />
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    var doctorIds = [];
    var slectedtag = [];
    $(function () {
        slectedtag = $("select").val();
    });
    function removeAssigntags() {
        $('option').prop('selected', false);
        $('select').trigger('liszt:updated');
        for (var i = 0; i < slectedtag.length; i++) {
            $("#lstOfTags option[value='" + slectedtag[i] + "']").prop("selected", true);
        }
        $('select').trigger('liszt:updated');

    }
    function removeAssignDoctor(userid, questionid) {
        if (confirm("Are you sure you want to remove this user from assigned doctors?") == true) {
            //var agent = navigator.userAgent;
            //var reg1 = /MSIE\s?(\d+)(?:\.(\d+))?/i;
            //var reg2 = /Trident\/7\./;
            //if (!(agent.match(reg1) || agent.match(reg2))) {
            //    top.location.href = top.location.href;
            //}
            //var msg = PageMethods.RemoveAssignDoctorToQuetion(userid, questionid, onSuccess, onFailure);

            $.ajax({
                type: 'GET',
                dataType: 'json',
                url: '/admin/RemoveAssignDoctorToQuetion?userid=' + userid + '&questionId=' + questionid,
                success: function (response) {
                    
                    if (response == "Assign doctor has been removed successfully.") {
                        //$(removebtn).parent().parents('tr').remove();
                        window.location.reload(true);
                    }
                },
                error: function (data) {
                    alert("Error Occured");
                }
            });
            
        }
    }
    function onSuccess(result) {
        alert(result);
        window.location.assign(location.href);
        $('.btnAssign').prop("disabled", false);
        IEReload();
    }
    function onFailure(error) {
        window.location.assign(location.href);
        $('.btnAssign').prop("disabled", false);
        IEReload();
    }
    function btnAssign_Click() {
        $('.btnAssign').prop("disabled", true);
        //__doPostBack('AssignDoctor', doctorIds.join(","));

        $.ajax({
            type: 'GET',
            dataType: 'json',
            //data: '"' + $('#city-select').val() + '"',
            contentType: 'application/json',
            url: '/admin/AssignDoctor?QuestionId=' + document.getElementById('hdnQuestionId').value + '&AssignDoctorIds=' + doctorIds.join(","),
            success: function (response) {
                var ListOfDoctors = '<table cellpadding="0" cellspacing="0" border="0" class="custom-table zebra-striped"' +
                  'id="assign-doctor-list" width="100%">' +
               '<thead>' +
                   '<tr>'+
                   '<th>'+
                   '<b>Userid</b>'+
                   '</th>'+
                   '<th>'+
                   '<b>Name</b>'+
                   '</th>'+
                   '<th>'+
                   '<b>City</b>'+
                   '</th>'+
                   '<th>'+
                   '<b>Location</b>'+
                   '</th>'+
                   '<th>'+
                   '<b>Specialities</b>'+
                   '</th>'+
                   '<th class="minwidth-remove">'+
                   '<b>Action</b>'+
                   '</th>'+
                   '</tr>'+
                  '</thead>'+
               '<tbody>' ;
                var TextToAppend = "";
                for (var i = 0; i < response.length; i++) {
                     TextToAppend = TextToAppend +
                        '<tr>' +
                        '<td>' + response[i].userid + '</td>' +
                        '<td>' + response[i].name + '</td>' +
                        '<td style="word-wrap: break-word">' + response[i].cities + '</td>' +
                        '<td style="word-wrap: break-word">' + response[i].locations + '</td>' +
                        '<td style="word-wrap: break-word">' + response[i].specialities + '</td>' +
                        '<td style="word-wrap: break-word" class="last-row">' +
                        '<a href="#" onclick="removeAssignDoctor(' + response[i].userid +', ' + response[i].Questionid + ')"><img class="cust-icon" src="../Content/image/revoke.png" id="removebtn"></a></td>' +
                        '</tr>' 
                }
                ListOfDoctors = ListOfDoctors + TextToAppend + '</tbody>' + '</table>'

                $("#divToReplace").empty();
                $("#divToReplace").append(ListOfDoctors);
            },
            error: function (data) {
                alert("Error occured");
            }
        });
    }
    function btnCancel_Click() {
        //__doPostBack(null, null);
        window.location.reload(true);
        //$('#doctor-list input:checked').each(function () {
        //    this.attr('checked', false);
        //});
        //doctorIds = [];
    }

    function IEReload() {
        var agent = navigator.userAgent;
        var reg1 = /MSIE\s?(\d+)(?:\.(\d+))?/i;
        var reg2 = /Trident\/7\./;
        if (agent.match(reg1) || agent.match(reg2)) {
            __doPostBack(null, null);
        }
    }

    function validatedata() {
        var errormsg = "";
        if ($("#lstOfTags :selected").length == 0) {
            errormsg = "Please select at least one tag.";
        }
        if (errormsg == "") {
            return true;
        }
        else {
            alert(errormsg);
            return false;
        }
    }
    function initDoctorListDataTable() {
        $('#doctor-list').dataTable({
            "aaSorting": [[1, "asc"]],
            "sDom": '<"row-fluid"<"span6"l><"span6"f>r>t<"row-fluid"<"span5"i><"span7"p>>',
            "sPaginationType": "bootstrap",
            "bStateSave": false,
            "bDestroy": true,
            "oLanguage": {
                "sLengthMenu": "_MENU_ records per page"
            },
            // Setup for responsive datatables helper.
            bAutoWidth: false
        });
    }
    $('#div-city-select').on('change', '#city-select', function (evt, params) {
        if (params == undefined) {
            $('#locality-select').empty();
            $("#locality-select").trigger("liszt:updated");
        }
    });
    $(".chzn-select").chosen
      ({
          allow_single_deselect: true,
          width: "200%"
      });
    $("#txtSpecialityOrName").keypress(function (e) {
        if (e.which == 13) {
            btnSearchDoctor_Click();
            return false;
        }
    });
    $(function () {
        $('.btnAssign').prop("disabled", true);
        $(".navigation li.active").removeClass("active");
        $("#liAdminQuestions").addClass("active");
        show_doctorTable();
        var oTable = $('#assign-doctor-list').dataTable({
            "bPaginate": false,
            "bFilter": false,
            "bInfo": false,
            "aoColumns": [
            /* userid */{ "bVisible": false },
            /* name */null,
            /*  city*/null,
            /* loaction */null,
            /* specility */null,
             /* action */null
            ]
        });

        $.ajax({
            type: 'GET',
            dataType: 'json',
            url: '/Services/UserService.svc/fillDropdowns',
            success: function (response) {
                response = JSON.parse(response);
                for (cnt = 0; cnt < response.length; cnt++)
                    $('#city-select').append(
                    $('<option></option>')
                        .val(response[cnt]["cityid"])
                        .html(response[cnt]["name"]));
                $(".chzn-select").trigger("liszt:updated");
            },
            error: function (data) {
                if (data.responseText.indexOf('Authentication failed') > -1) {
                    location.reload();
                }
            }
        });
    });
    function btnSearchDoctor_Click() {
        var cityid = $('#city-select').val();
        var locationid = $('#locality-select').val();
        var specialityOrName = $('#txtSpecialityOrName').val();
        $("#searchResult").empty();
        show_doctorTable(cityid, locationid, specialityOrName);
        return false;
    };
    function handleClick(Ckbox) {
        if (Ckbox.checked) {
            doctorIds.push(Ckbox.value);
        }
        else {
            var index = doctorIds.indexOf(Ckbox.value);
            if (index > -1) {
                doctorIds.splice(index, 1);
            }
        }
        if (doctorIds.length > 0) {
            $('.btnAssign').prop("disabled", false);
        }
        else {
            $('.btnAssign').prop("disabled", true);
        }
    }
    function show_doctorTable(cityid, locationid, specialityOrName) {
        var hdnAssignDocIds = document.getElementById("hdndoctorIds").value;
        var arrOfAssignDocIds = hdnAssignDocIds.split(",");
        if (typeof (cityid) === "undefined") { cityid = ''; }
        if (typeof (locationid) === "undefined") { locationid = ''; }
        if (typeof (specialityOrName) === "undefined") { specialityOrName = ''; }
        $.ajax({
            type: 'POST',
            data: '{ "cityid":"' + cityid + '" , "locationid":"' + locationid + '", "specialityOrName":"' + specialityOrName + '", "isEncrypt": "false"}',
            contentType: 'application/json',
            url: "/Services/UserService.svc/getDoctorList",
            success: function (response) {
                response = JSON.parse(response);
                $("#searchResult").empty();
                $("#searchspan").empty();
                var table_template = "<div class='table-responsive'><table cellpadding='0' cellspacing='0' border='0' class='custom-table zebra-striped'id='doctor-list'>" +
                "<thead><tr><th ><b> Select  </th> <th ><b> Name</b> </th> <th ><b> City</b></th> <th ><b>location</b> </th> <th > <b>Specialities</b> </th> </tr></thead><tbody>";

                for (indexcnt = 0; indexcnt < response.length; indexcnt++) {
                    var table_body_template = ''
                    var location = ''
                    if(response[indexcnt].locations!= null){
                        location = response[indexcnt].locations
                    }
                    if (arrOfAssignDocIds.indexOf(response[indexcnt].userid.toString()) == -1) {
                        table_body_template = "<tr> <td><input type='checkbox' name='doctor' onclick='handleClick(this)' value=" + response[indexcnt].userid + "> </td><td style='word-wrap: break-word'>" + response[indexcnt].name + " </td><td style='word-wrap: break-word'>" + response[indexcnt].cities +
                                "</td><td style='word-wrap: break-word'>" + location +
                                "</td><td style='word-wrap: break-word'>" + response[indexcnt].specialities + "</td></tr>";
                    }
                    table_template = table_template + table_body_template
                }
                table_template = table_template + "</tr> </tbody></table></div>";
                $("#searchResult").append(table_template);
                initDoctorListDataTable();
                if (response.length == 0) {
                    table_template = table_template + "</tr> </tbody></table>";
                }
            },
            error: function (e) {
                if (data.responseText.indexOf('Authentication failed') > -1) {
                    location.reload();
                }
            }
        });
    }
    $('#div-city-select').on('change', '#city-select', function () {
        if ($('#city-select').val()) {
            getLocationsbyCity();
        }
    });
    function getLocationsbyCity() {
        $.ajax({
            type: 'POST',
            dataType: 'json',
            data: '"' + $('#city-select').val() + '"',
            contentType: 'application/json',
            url: '/Services/UserService.svc/getLocationsbyCity',
            success: function (response) {
                $('#locality-select').empty();
                $('#locality-select').append('<option></option>');
                response = JSON.parse(response);
                for (cnt = 0; cnt < response.length; cnt++)
                    $('#locality-select').append(
                    $('<option></option>')
                        .val(response[cnt]["locationid"])
                        .html(response[cnt]["name"]));
                $('#locality-select').append('<option></option>');
                $('#locality-select').append($('#locality-select').html());
                $(".chzn-select").trigger("liszt:updated");
            },
            error: function (data) {
                if (data.responseText.indexOf('Authentication failed') > -1) {
                    location.reload();
                }
            }
        });
    }

    $(function () {
        slectedtag = $("select").val();
    });


    function validatedata() {
        var errormsg = "";
        if ($("#lstOfTags :selected").length == 0) {
            errormsg = "Please select at least one tag.";
        }
        if (errormsg == "") {
            Updatedslectedtag = $("select").val();
            var newtags = [];
            var deletedtags = [];
            for (var i = 0; i < Updatedslectedtag.length; i++) {
                var index = $.inArray(Updatedslectedtag[i], slectedtag)
                if (index == -1) {
                    newtags.push(Updatedslectedtag[i])
                }
            }
            for (var i = 0; i < slectedtag.length; i++) {
                var index = $.inArray(slectedtag[i], Updatedslectedtag)
                if (index == -1) {
                    deletedtags.push(slectedtag[i])
                }
            }
            $.ajax({
                type: 'POST',
                data: '{ "Addedtags":"' + newtags.toString() + '" , "DeletedTags":"' + deletedtags.toString() + '", "QuestionID":"' + $("#hdnQuestionid").val() + '"}',
                contentType: 'application/json',
                url: "../../Services/UserService.svc/UpdateQuestionTags",
                success: function (response) {
                    alert("Tag's assigned to questions")
                },
                error: function (e) {
                    console.log(e);
                }
            });
            return true;
        }
        else {
            alert(errormsg);
            return false;
        }
    }

    $(function () {
        slectedtag = $("select").val();
    });

    function validatedata() {
        var errormsg = "";
        if ($("#lstOfTags :selected").length == 0) {
            errormsg = "Please select at least one tag.";
        }
        if (errormsg == "") {
            Updatedslectedtag = $("select").val();
            var newtags = [];
            var deletedtags = [];
            for (var i = 0; i < Updatedslectedtag.length; i++) {
                var index = $.inArray(Updatedslectedtag[i], slectedtag)
                if (index == -1) {
                    newtags.push(Updatedslectedtag[i])
                }
            }
            for (var i = 0; i < slectedtag.length; i++) {
                var index = $.inArray(slectedtag[i], Updatedslectedtag)
                if (index == -1) {
                    deletedtags.push(slectedtag[i])
                }
            }
            $.ajax({
                type: 'POST',
                data: '{ "Addedtags":"' + newtags.toString() + '" , "DeletedTags":"' + deletedtags.toString() + '", "QuestionID":"' + $("#hdnQuestionid").val() + '"}',
                contentType: 'application/json',
                url: "../../Services/UserService.svc/UpdateQuestionTags",
                success: function (response) {
                    alert("Tag's assigned to questions")
                },
                error: function (e) {
                    console.log(e);
                }
            });
            return true;
        }
        else {
            alert(errormsg);
            return false;
        }
    }


    (function (i, s, o, g, r, a, m) {
        i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
            (i[r].q = i[r].q || []).push(arguments)
        }, i[r].l = 1 * new Date(); a = s.createElement(o),
        m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
    })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

    ga('create', 'UA-48132984-2', 'askmirai.com');
    ga('send', 'pageview');
</script>